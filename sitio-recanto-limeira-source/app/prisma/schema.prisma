
generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/sitio_recanto_limeira/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth.js models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      String?
  role          UserRole  @default(ADMIN)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum UserRole {
  ADMIN
}

model Reservation {
  id            String            @id @default(cuid())
  guestName     String
  guestEmail    String
  guestPhone    String
  checkIn       DateTime
  checkOut      DateTime
  guests        Int
  totalDays     Int
  totalPrice    Float?
  observations  String?
  status        ReservationStatus @default(PENDING)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@unique([checkIn, checkOut]) // Evita reservas conflitantes
  @@map("reservations")
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

// Modelo para controlar datas bloqueadas
model BlockedDate {
  id        String   @id @default(cuid())
  date      DateTime? // Campo antigo, mantido por compatibilidade
  startDate DateTime? // Nova data de in√≠cio
  endDate   DateTime? // Nova data de fim
  reason    String?
  createdBy String?  // Para identificar origem (manual, airbnb-sync, etc)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([startDate, endDate])
  @@map("blocked_dates")
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  createdAt DateTime @default(now())

  @@map("contacts")
}
